name: Release

# Events that trigger this workflow
on: [workflow_dispatch]

jobs:
  #  build-windows:
  #    runs-on: windows-latest
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2.3.4
  #      - name: Setup Node.js environment
  #        uses: actions/setup-node@v2.1.2
  #      - name: Cache node modules
  #        uses: actions/cache@v2
  #        env:
  #          cache-name: cache-node-modules
  #        with:
  #          # npm cache files are stored in `~/.npm` on Linux/macOS
  #          path: ~/.npm
  #          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #          restore-keys: |
  #            ${{ runner.os }}-build-${{ env.cache-name }}-
  #            ${{ runner.os }}-build-
  #            ${{ runner.os }}-
  #      - name: Install dependencies
  #        run: npm ci
  #      - name: Build
  #        run: npm run build
  #      - name: Upload a Build Artifact
  #        uses: actions/upload-artifact@v2.2.1
  #        with:
  #          # Artifact name
  #          name: windows-${{ github.run_id }} # optional, default is artifact
  #          # A file, directory or wildcard pattern that describes what to upload
  #          path: ./dist
  #  build-linux:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2.3.4
  #      - name: Setup Node.js environment
  #        uses: actions/setup-node@v2.1.2
  #      - name: Cache node modules
  #        uses: actions/cache@v2
  #        env:
  #          cache-name: cache-node-modules
  #        with:
  #          # npm cache files are stored in `~/.npm` on Linux/macOS
  #          path: ~/.npm
  #          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #          restore-keys: |
  #            ${{ runner.os }}-build-${{ env.cache-name }}-
  #            ${{ runner.os }}-build-
  #            ${{ runner.os }}-
  #      - name: Install dependencies
  #        run: npm ci
  #      - name: Build
  #        run: npm run build
  #      - name: Upload a Build Artifact
  #        uses: actions/upload-artifact@v2.2.1
  #        with:
  #          # Artifact name
  #          name: linux-${{ github.run_id }} # optional, default is artifact
  #          # A file, directory or wildcard pattern that describes what to upload
  #          path: ./dist
  release:
    #    needs: [build-windows,build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
      - name: Install dependencies
        run: npm ci
      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.github_token }}
          release-count: '0'
      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
      #      - name: Add Windows
      #        if: ${{ steps.changelog.outputs.skipped == 'false' }}
      #        uses: actions/download-artifact@v2
      #        with:
      #          name: windows-${{ github.run_id }}
      #          path: windows/
      #      - name: Add Linux
      #        if: ${{ steps.changelog.outputs.skipped == 'false' }}
      #        uses: actions/download-artifact@v2
      #        with:
      #          name: linux-${{ github.run_id }}
      #          path: linux/
      #      - name: Zip Windows and Linux
      #        if: ${{ steps.changelog.outputs.skipped == 'false' }}
      #        run: |
      #          zip -r windows.zip windows
      #          zip -r linux.zip linux
      - name: Build for Linux
        run: npm run build
      #      - name: Upload Windows
      #        if: ${{ steps.changelog.outputs.skipped == 'false' }}
      #        uses: actions/upload-release-asset@v1
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #        with:
      #          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #          asset_path: ./windows.zip
      #          asset_name: windows.zip
      #          asset_content_type: application/zip
      - name: Upload Linux
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.changelog.outputs.tag }}
          file: ./dist/telestion-rocketsound-psc*.*
          file_glob: true
